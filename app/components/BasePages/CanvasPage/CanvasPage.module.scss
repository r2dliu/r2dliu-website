@use "../../../styles/mixins" as *;

$hamburger-padding-x: 11px !default;
$hamburger-padding-y: 11px !default;
$hamburger-layer-width: 30px !default;
$hamburger-layer-height: 4px !default;
$hamburger-layer-spacing: 5px !default;
$hamburger-layer-color: white !default;
$hamburger-layer-border-radius: 4px !default;
$hamburger-hover-opacity: 0.7 !default;
$hamburger-active-layer-color: $hamburger-layer-color !default;
$hamburger-active-hover-opacity: $hamburger-hover-opacity !default;

.CanvasPage {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;

  @include breakpoint(tablet) {
    flex-direction: column;
  }

  .divider {
    width: 2px;
    background-color: white;
    z-index: 1;
  }

  .canvas {
    height: 100%;
    width: 100%;

    @include breakpoint(tablet) {
      height: calc(100% - 44px);
    }

    &.blur {
      transition: all 0.2s ease-in;
      opacity: 0.3;
      filter: blur(8px);
    }
  }

  .navbar {
    height: 44px;
    width: 100%;
    // begin hamburger css
    .hamburger {
      padding: $hamburger-padding-y $hamburger-padding-x;
      display: flex;
      cursor: pointer;

      transition-property: opacity, filter;
      transition-duration: 0.15s;
      transition-timing-function: linear;

      font: inherit;
      color: inherit;
      text-transform: none;
      background-color: transparent;
      border: 0;
      margin: 0;
      overflow: visible;

      &:hover {
        opacity: $hamburger-hover-opacity;
      }

      &.isActive {
        &:hover {
          opacity: $hamburger-active-hover-opacity;
        }

        .hamburger-inner,
        .hamburger-inner::before,
        .hamburger-inner::after {
          background-color: $hamburger-active-layer-color;
        }
      }
    }

    .hamburgerBox {
      width: $hamburger-layer-width;
      height: $hamburger-layer-height * 3 + $hamburger-layer-spacing * 2;
      display: inline-block;
      position: relative;
    }

    .hamburgerInner {
      display: block;
      top: 50%;
      margin-top: calc($hamburger-layer-height / -2);

      &,
      &::before,
      &::after {
        width: $hamburger-layer-width;
        height: $hamburger-layer-height;
        background-color: $hamburger-layer-color;
        border-radius: $hamburger-layer-border-radius;
        position: absolute;
        transition-property: transform;
        transition-duration: 0.15s;
        transition-timing-function: ease;
      }

      &::before,
      &::after {
        content: "";
        display: block;
      }

      &::before {
        top: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
      }

      &::after {
        bottom: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
      }
    }

    .hamburgerSlider {
      .hamburgerInner {
        top: calc($hamburger-layer-height / 2);

        &::before {
          top: $hamburger-layer-height + $hamburger-layer-spacing;
          transition-property: transform, opacity;
          transition-timing-function: ease;
          transition-duration: 0.15s;
        }

        &::after {
          top: ($hamburger-layer-height * 2) + ($hamburger-layer-spacing * 2);
        }
      }

      &.isActive {
        .hamburgerInner {
          $y-offset: $hamburger-layer-spacing + $hamburger-layer-height;

          transform: translate3d(0, $y-offset, 0) rotate(45deg);

          &::before {
            transform: rotate(-45deg)
              translate3d(
                calc($hamburger-layer-width / -7),
                $hamburger-layer-spacing * -1,
                0
              );
            opacity: 0;
          }

          &::after {
            transform: translate3d(0, $y-offset * -2, 0) rotate(-90deg);
          }
        }
      }
    }

    .hamburgerSlider {
      .hamburgerInner {
        top: calc($hamburger-layer-height / 2);

        &::before {
          top: $hamburger-layer-height + $hamburger-layer-spacing;
          transition-property: transform, opacity;
          transition-timing-function: ease;
          transition-duration: 0.15s;
        }

        &::after {
          top: ($hamburger-layer-height * 2) + ($hamburger-layer-spacing * 2);
        }
      }

      &.isActive {
        .hamburgerInner {
          $y-offset: $hamburger-layer-spacing + $hamburger-layer-height;

          transform: translate3d(0, $y-offset, 0) rotate(45deg);

          &::before {
            transform: rotate(-45deg)
              translate3d(
                calc($hamburger-layer-width / -7),
                $hamburger-layer-spacing * -1,
                0
              );
            opacity: 0;
          }

          &::after {
            transform: translate3d(0, $y-offset * -2, 0) rotate(-90deg);
          }
        }
      }
    }
  }
}
